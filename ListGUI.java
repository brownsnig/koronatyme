
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jas_lin
 */
public class ListGUI extends javax.swing.JFrame {

    /**
     * Creates new form ListGUI
     */
    Tree masterList = new Tree(); 
    Map masterMap = new Map(); 
    ArrayList<ToDoList> tempList = new ArrayList<ToDoList>(); 
    
    public ListGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        EnterTaskLabel = new javax.swing.JLabel();
        DueDateLabel = new javax.swing.JLabel();
        AddSelectCategoryLabel = new javax.swing.JLabel();
        TaskVariable = new javax.swing.JTextField();
        AddCategoryVariable = new javax.swing.JTextField();
        SelectCategoryVariable = new javax.swing.JComboBox<>();
        AddButton = new javax.swing.JButton();
        MonthLabel = new javax.swing.JLabel();
        DayLabel = new javax.swing.JLabel();
        YearLabel = new javax.swing.JLabel();
        MinutesLabel = new javax.swing.JLabel();
        HourLabel = new javax.swing.JLabel();
        YearVariable = new javax.swing.JTextField();
        HourVariable = new javax.swing.JTextField();
        MinutesVariable = new javax.swing.JTextField();
        MonthVariable = new javax.swing.JComboBox<>();
        DayVariable = new javax.swing.JComboBox<>();
        AddSelectListVariable = new javax.swing.JLabel();
        AddListLabel = new javax.swing.JLabel();
        SelectListLabel = new javax.swing.JLabel();
        CreateListVariable = new javax.swing.JTextField();
        ExistingListVariable = new javax.swing.JComboBox<>();
        ErrorLabel = new javax.swing.JLabel();
        SizeOfListLabel = new javax.swing.JLabel();
        SizeOfListVariable = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        CheckExistingLabel = new javax.swing.JLabel();
        ListLabel = new javax.swing.JLabel();
        ViewCategoryVariable = new javax.swing.JComboBox<>();
        ViewCategoryLabel = new javax.swing.JLabel();
        ViewListVariable = new javax.swing.JComboBox<>();
        UpdateButton = new javax.swing.JButton();
        ViewListLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        AllTasksVariable = new javax.swing.JTextArea();
        Reset2 = new javax.swing.JButton();
        DisplayTasksVariable = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 750));

        jPanel3.setBackground(new java.awt.Color(102, 102, 255));

        EnterTaskLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        EnterTaskLabel.setForeground(new java.awt.Color(255, 255, 255));
        EnterTaskLabel.setText("Enter Task: ");

        DueDateLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        DueDateLabel.setForeground(new java.awt.Color(255, 255, 255));
        DueDateLabel.setText("Enter due date: ");

        AddSelectCategoryLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AddSelectCategoryLabel.setForeground(new java.awt.Color(255, 255, 255));
        AddSelectCategoryLabel.setText("Add new category or select category: ");

        SelectCategoryVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectCategoryVariableActionPerformed(evt);
            }
        });

        AddButton.setBackground(new java.awt.Color(102, 102, 255));
        AddButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AddButton.setForeground(new java.awt.Color(255, 255, 255));
        AddButton.setText("Add New Task ");
        AddButton.setActionCommand("Add Task ");
        AddButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        AddButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        MonthLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        MonthLabel.setForeground(new java.awt.Color(255, 255, 255));
        MonthLabel.setText("Month: ");

        DayLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        DayLabel.setForeground(new java.awt.Color(255, 255, 255));
        DayLabel.setText("Day: ");

        YearLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        YearLabel.setForeground(new java.awt.Color(255, 255, 255));
        YearLabel.setText("Year: ");

        MinutesLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        MinutesLabel.setForeground(new java.awt.Color(255, 255, 255));
        MinutesLabel.setText("Minutes (default is 0): ");

        HourLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        HourLabel.setForeground(new java.awt.Color(255, 255, 255));
        HourLabel.setText("Hour: ");

        MonthVariable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        MonthVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MonthVariableActionPerformed(evt);
            }
        });

        DayVariable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", " " }));
        DayVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DayVariableActionPerformed(evt);
            }
        });

        AddSelectListVariable.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AddSelectListVariable.setForeground(new java.awt.Color(255, 255, 255));
        AddSelectListVariable.setText("Create a new list or choose from an existing list: ");

        AddListLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AddListLabel.setForeground(new java.awt.Color(255, 255, 255));
        AddListLabel.setText("Create a new list: ");

        SelectListLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        SelectListLabel.setForeground(new java.awt.Color(255, 255, 255));
        SelectListLabel.setText("Select a preexisting list: ");

        ErrorLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ErrorLabel.setForeground(new java.awt.Color(255, 255, 255));

        SizeOfListLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        SizeOfListLabel.setForeground(new java.awt.Color(255, 255, 255));
        SizeOfListLabel.setText("Size of List (default is 5): ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddSelectListVariable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EnterTaskLabel)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                                .addComponent(AddCategoryVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                                        .addComponent(MonthLabel)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(MonthVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                                        .addComponent(DueDateLabel)
                                                        .addGap(33, 33, 33)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(48, 48, 48)
                                                .addComponent(SelectCategoryVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(YearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(YearVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(MinutesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AddSelectCategoryLabel)
                                    .addComponent(TaskVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addComponent(SelectListLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(ExistingListVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addComponent(AddListLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(CreateListVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addComponent(SizeOfListLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                            .addComponent(SizeOfListVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(AddButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(27, 27, 27)))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(MinutesVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(DayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(DayVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(HourLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(HourVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(EnterTaskLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TaskVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddSelectCategoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddCategoryVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectCategoryVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(DueDateLabel)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MonthLabel)
                    .addComponent(MonthVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(YearLabel)
                    .addComponent(YearVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DayLabel)
                    .addComponent(DayVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HourLabel)
                    .addComponent(HourVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(MinutesVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MinutesLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddSelectListVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateListVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddListLabel))
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectListLabel)
                    .addComponent(ExistingListVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SizeOfListVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SizeOfListLabel))
                .addGap(25, 25, 25)
                .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 450, 670));

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));

        TitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        TitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        TitleLabel.setText("Korana Tyme To Do List");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(TitleLabel)
                .addContainerGap(213, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 930, 60));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 930, 20));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 390, 480, 10));

        CheckExistingLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        CheckExistingLabel.setText("Check if task was ever included: ");
        getContentPane().add(CheckExistingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 400, 300, 30));

        ListLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        ListLabel.setText("Select which list to view: ");
        getContentPane().add(ListLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 190, -1, -1));

        ViewCategoryVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewCategoryVariableActionPerformed(evt);
            }
        });
        getContentPane().add(ViewCategoryVariable, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 150, 120, -1));

        ViewCategoryLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        ViewCategoryLabel.setText("Select Category: ");
        getContentPane().add(ViewCategoryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 120, -1, -1));

        ViewListVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewListVariableActionPerformed(evt);
            }
        });
        getContentPane().add(ViewListVariable, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 220, 120, -1));

        UpdateButton.setBackground(new java.awt.Color(102, 102, 255));
        UpdateButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UpdateButton.setText("Update and Check");
        UpdateButton.setActionCommand("Add Task ");
        UpdateButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        UpdateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(UpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 690, 200, 40));

        ViewListLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ViewListLabel1.setText("View List");
        getContentPane().add(ViewListLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 90, 110, 30));

        AllTasksVariable.setColumns(20);
        AllTasksVariable.setRows(5);
        jScrollPane2.setViewportView(AllTasksVariable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 440, 420, 230));

        Reset2.setBackground(new java.awt.Color(204, 204, 255));
        Reset2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Reset2.setText("Reset");
        Reset2.setActionCommand("Add Task ");
        Reset2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        Reset2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Reset2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reset2ActionPerformed(evt);
            }
        });
        getContentPane().add(Reset2, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 150, 150, 40));
        getContentPane().add(DisplayTasksVariable, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 260, 440, 130));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
        boolean error = false; 
        String task = TaskVariable.getText();
        if(task.equals(""))
        {
            error = true; 
            ErrorLabel.setText("There was an error with inputting information");
            System.out.println("15"); 

        }
        
        String category = "";
        int month = 0;
        int day = 0;
        int year = 0;
        int hour = 0;
        int minutes = 0;

        boolean dateDefault = false;
        
        System.out.println(error + "before category"); 
        
        if (!AddCategoryVariable.equals("") && SelectCategoryVariable.getSelectedIndex() != -1) {
            ErrorLabel.setText("There was an error with inputting information");
            error = true; 
        } 
        else if (AddCategoryVariable.equals("") && SelectCategoryVariable.getSelectedIndex() == -1) {
            category = "Default"; 
        } 
        else if (!AddCategoryVariable.equals("")) {
            category = AddCategoryVariable.getText();
            boolean exist = false; 
            for(int i = 0; i < SelectCategoryVariable.getItemCount(); i++)
            {
                if(SelectCategoryVariable.getItemAt(i).toString().equals(category))
                {
                    exist = true; 
                }
            }
            if(!exist)
                SelectCategoryVariable.addItem(category);
            else 
            {
                ErrorLabel.setText("This category already exists."); 
                error = true; 
            }
        } 
        else if (SelectCategoryVariable.getSelectedIndex() != -1) {
            category = SelectCategoryVariable.getSelectedItem().toString();
        }
        
        System.out.println(error + "before date"); 

        if (MonthVariable.getSelectedIndex() == -1 && DayVariable.getSelectedIndex() == -1 && YearVariable.getText().equals("") && HourVariable.getText().equals("") && MinutesVariable.getText().equals("")) {
            dateDefault = true;
        } 
        else 
        {
            if (MonthVariable.getSelectedIndex() != -1) {
                month = Integer.parseInt(MonthVariable.getSelectedItem().toString());
            } 
            else {
                ErrorLabel.setText("There was an error with inputting information");
                error = true;
            }

            if (DayVariable.getSelectedIndex() != -1) {
                day = Integer.parseInt(DayVariable.getSelectedItem().toString());
            } 
            else {
                ErrorLabel.setText("There was an error with inputting information");
                error = true;
            }

            if (YearVariable.getText().equals("")) {
                ErrorLabel.setText("There was an error with inputting information");
                error = true;
            } 
            else {
                String year2 = YearVariable.getText(); 
                if(isInteger(year2))
                {
                    year = Integer.parseInt(year2); 
                }
                else 
                {
                    error = true;
                    ErrorLabel.setText("Incorrect input"); 
                }
            }
            
            if (HourVariable.getText().equals("")) {
                ErrorLabel.setText("There was an error with inputting information");
                error = true;  
            }          
            else{
                String hour2 = HourVariable.getText(); 
                if(isInteger(hour2))
                {
                    hour = Integer.parseInt(hour2); 
                }
                else 
                {
                    error = true;
                    ErrorLabel.setText("Incorrect input");
                }
                hour = Integer.parseInt(HourVariable.getText());
            }

            String minutes2 = MinutesVariable.getText(); 
            if(isInteger(minutes2))
            {
                minutes = Integer.parseInt(minutes2); 
            }
            else if(!minutes2.equals(""))
            {
                error = true; 
                ErrorLabel.setText("Input is not a number"); 
                
            }
            
            /*if (MinutesVariable.getText().equals("")) {
                ErrorLabel.setText("There was an error with inputting information");
                error = true;
                System.out.println("12"); 
            } 
            else {
                String minutes2 = MinutesVariable.getText(); 
                if(isInteger(minutes2))
                {
                    minutes = Integer.parseInt(minutes2); 
                }
                else 
                {
                    error = true;
                    ErrorLabel.setText("Incorrect input"); 
                    System.out.println("13"); 
                }
                minutes = Integer.parseInt(MinutesVariable.getText());

            }*/

        }
        

        
        toDoEntry t1 = new toDoEntry(null, null, 0); 
        if (!error)
        {
            if(dateDefault)
            {
                t1 = new toDoEntry(task, category, 0); 
                t1.update();
            }
            else if(!dateDefault)
            {
                t1 = new toDoEntry(task, category, month, day, year, minutes, 0, 0); 
                t1.update(); 
            } 
            masterMap.add(t1);
        }
        else 
        {
            //ErrorLabel.setText("There was an error with inputting information");
            System.out.println("here"); 
        }
        
        
        
        //Edit this
        //CreateListVariable
        //ExistingListVariable
        String listName = ""; 
        boolean error2 = false; 
        
        if (!CreateListVariable.equals("") && ExistingListVariable.getSelectedIndex() != -1) {
            ErrorLabel.setText("There was an error with inputting information"); 
            error2 = true; 
            System.out.println("1");
        } 
        else if (CreateListVariable.equals("") && ExistingListVariable.getSelectedIndex() == -1) {
            ErrorLabel.setText("Can not choose two lists"); 
            error2 = true; 
            System.out.println("2"); 
        } 
        else if (!CreateListVariable.equals("")) {
            listName = CreateListVariable.getText();
            boolean exist = false; 
            for(int i = 0; i < ExistingListVariable.getItemCount(); i++)
            {
                if(ExistingListVariable.getItemAt(i).toString().equals(listName))
                {
                    exist = true; 
                }
            }
            if(!exist)
                ExistingListVariable.addItem(listName);
            else 
            {
                ErrorLabel.setText("This category already exists."); 
                error2 = true;
                System.out.println("3"); 
            }
        } 
        else if (ExistingListVariable.getSelectedIndex() != -1) {
            listName = ExistingListVariable.getSelectedItem().toString();
        }
        
        
        ToDoList l1 = new ToDoList(null, 1); 
        if(!error2)
        {
            if(isInteger(SizeOfListVariable.getText()))
            {
               int n = Integer.parseInt(SizeOfListVariable.getText());
               l1 = new ToDoList(listName, n);
               l1.add(t1); 
            }
            else 
            {
                l1 = new ToDoList(listName); 
                l1.add(t1); 
            }
            masterList.insert(category); 
            masterList.insert(l1, category);
            ViewCategoryVariable.addItem(category);

        }
        else 
        {
            ErrorLabel.setText("List error"); 
        }
        
        
        TaskVariable.setText(""); 
        AddCategoryVariable.setText(""); 
        YearVariable.setText(""); 
        HourVariable.setText(""); 
        MinutesVariable.setText(""); 
        CreateListVariable.setText(""); 
        SizeOfListVariable.setText(""); 
        
        MonthVariable.setSelectedIndex(-1);
        DayVariable.setSelectedIndex(-1); 
        ExistingListVariable.setSelectedIndex(-1); 
        SelectCategoryVariable.setSelectedIndex(-1); 

    }//GEN-LAST:event_AddButtonActionPerformed

    public boolean isInteger( String input ) {
        try {
            Integer.parseInt( input );
            return true;
        }
        catch( Exception e ) {
            return false;
        }
    }
    
    private void SelectCategoryVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectCategoryVariableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SelectCategoryVariableActionPerformed

    private void MonthVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MonthVariableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MonthVariableActionPerformed

    private void DayVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DayVariableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DayVariableActionPerformed

    private void ViewListVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewListVariableActionPerformed
        // TODO add your handling code here:
        //check if a category variable has been selected 
        /*System.out.println(ViewCategoryVariable.getSelectedIndex());
        if(ViewCategoryVariable.getSelectedIndex() != -1)//chosen a category 
        {
           ArrayList<TreeNode> temp = masterList.search(ViewCategoryVariable.getSelectedItem().toString()).getAllChildren(); 
           for(int i = 0; i < temp.size(); i++)
           {
               ViewListVariable.addItem(((ToDoList)((TreeNode) masterList.search(ViewCategoryVariable.getSelectedItem().toString()).getAllChildren().get(i)).getElem()).getName());
           }
        }*/
        
        if(ViewListVariable.getSelectedIndex() != -1)
        {
            for(int i = 0; i < tempList.size(); i++)
            {
                if(tempList.get(i).getName().equals(ViewListVariable.getSelectedItem().toString()))
                {
                    DisplayTasksVariable.setText(tempList.get(i).viewList()); 
                }
            }
        }
        
    }//GEN-LAST:event_ViewListVariableActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        AllTasksVariable.setText("");
        AllTasksVariable.setText(masterMap.toString()); 
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void Reset2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reset2ActionPerformed
        // TODO add your handling code here:
        DisplayTasksVariable.setText("");
        ViewCategoryVariable.setSelectedIndex(-1); 
        ViewListVariable.setSelectedIndex(-1);
    }//GEN-LAST:event_Reset2ActionPerformed

    private void ViewCategoryVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewCategoryVariableActionPerformed
        // TODO add your handling code here:
        if(ViewCategoryVariable.getSelectedIndex() != -1)//chosen a category 
        {
           ArrayList<TreeNode> temp = masterList.search(ViewCategoryVariable.getSelectedItem().toString()).getAllChildren();

           for(int i = 0; i < temp.size(); i++)
           {
               tempList.add(((ToDoList)((TreeNode) masterList.search(ViewCategoryVariable.getSelectedItem().toString()).getAllChildren().get(i)).getElem())); 
               ViewListVariable.addItem(((ToDoList)((TreeNode) masterList.search(ViewCategoryVariable.getSelectedItem().toString()).getAllChildren().get(i)).getElem()).getName());
           }
        }
    }//GEN-LAST:event_ViewCategoryVariableActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JTextField AddCategoryVariable;
    private javax.swing.JLabel AddListLabel;
    private javax.swing.JLabel AddSelectCategoryLabel;
    private javax.swing.JLabel AddSelectListVariable;
    private javax.swing.JTextArea AllTasksVariable;
    private javax.swing.JLabel CheckExistingLabel;
    private javax.swing.JTextField CreateListVariable;
    private javax.swing.JLabel DayLabel;
    private javax.swing.JComboBox<String> DayVariable;
    private javax.swing.JTextField DisplayTasksVariable;
    private javax.swing.JLabel DueDateLabel;
    private javax.swing.JLabel EnterTaskLabel;
    private javax.swing.JLabel ErrorLabel;
    private javax.swing.JComboBox<String> ExistingListVariable;
    private javax.swing.JLabel HourLabel;
    private javax.swing.JTextField HourVariable;
    private javax.swing.JLabel ListLabel;
    private javax.swing.JLabel MinutesLabel;
    private javax.swing.JTextField MinutesVariable;
    private javax.swing.JLabel MonthLabel;
    private javax.swing.JComboBox<String> MonthVariable;
    private javax.swing.JButton Reset2;
    private javax.swing.JComboBox<String> SelectCategoryVariable;
    private javax.swing.JLabel SelectListLabel;
    private javax.swing.JLabel SizeOfListLabel;
    private javax.swing.JTextField SizeOfListVariable;
    private javax.swing.JTextField TaskVariable;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel ViewCategoryLabel;
    private javax.swing.JComboBox<String> ViewCategoryVariable;
    private javax.swing.JLabel ViewListLabel1;
    private javax.swing.JComboBox<String> ViewListVariable;
    private javax.swing.JLabel YearLabel;
    private javax.swing.JTextField YearVariable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
